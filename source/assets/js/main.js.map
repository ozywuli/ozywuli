{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/lodash/_Symbol.js","node_modules/lodash/_baseGetTag.js","node_modules/lodash/_freeGlobal.js","node_modules/lodash/_getRawTag.js","node_modules/lodash/_objectToString.js","node_modules/lodash/_root.js","node_modules/lodash/debounce.js","node_modules/lodash/isObject.js","node_modules/lodash/isObjectLike.js","node_modules/lodash/isSymbol.js","node_modules/lodash/now.js","node_modules/lodash/toNumber.js","tmp/src/assets/js/main.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;AACA;AACA;AACA;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClEA;;;;;;AAEA,EAAE,QAAF,EAAY,KAAZ,CAAkB,YAAW;AACzB;AACA,gBAAY,IAAZ;AACA,gBAAY,IAAZ;AACA;;AAEA;AACA,QAAI,gBAAgB,OAAO,QAA3B,EAAsC;AAClC,sBAAc,IAAd;AACH;AAEJ,CAXD;;AAaA;;;AAGA,IAAI,cAAc;AACd,kBAAc,EAAE,mBAAF,CADA;AAEd,YAAQ,EAAE,eAAF,CAFM;AAGd,cAAU,kBAAS,CAAT,EAAY;AAClB,YAAI,OAAO,IAAX;AACA,U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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","import _debounce from 'lodash/debounce';\r\n\r\n$(document).ready(function() {\r\n    // navToggleObj.init();\r\n    lazyLoadImg.init();\r\n    scrollUpObj.init();\r\n    // smToggleObj.init();\r\n\r\n    // https://stackoverflow.com/questions/138669/how-can-i-determine-if-a-javascript-variable-is-defined-in-a-page\r\n    if ('undefined' !== typeof(mapboxgl)) {\r\n        contactMapObj.init();    \r\n    }\r\n    \r\n});\r\n\r\n/*------------------------------------*\\\r\n  SOCIAL MEDIA TOGGLE\r\n\\*------------------------------------*/\r\nlet smToggleObj = {\r\n    $smToggleBtn: $('.js-sm-toggle-btn'),\r\n    $smBar: $('.js-topbar-sm'),\r\n    toggleSm: function(e) {\r\n        let self = this;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.$smBar.toggleClass('is-revealed');\r\n\r\n        if (this.$smBar.hasClass('is-revealed')) {\r\n            $(window).on('click.sm', function() {\r\n                self.$smBar.removeClass('is-revealed');\r\n            });\r\n            this.$smBar.on('click.sm', function(event){\r\n                event.stopPropagation();\r\n            });\r\n        } else {\r\n            $(window).off('click.sm');\r\n            this.$smBar.off('click.sm');\r\n        }\r\n    },\r\n    init: function() {\r\n        this.$smToggleBtn.on('click', this.toggleSm.bind(this));\r\n    }\r\n}\r\n\r\n/*------------------------------------*\\\r\n  GLOBAL SCROLL EVENT\r\n\\*------------------------------------*/\r\nfunction scrollHandler() {\r\n    if ($(window).scrollTop() > $(window).height() / 1.5) {\r\n        $('.js-scrollup').addClass('is-revealed');\r\n    } else {\r\n        $('.js-scrollup').removeClass('is-revealed');\r\n    }\r\n}\r\n\r\n$(window).on('scroll', _debounce(scrollHandler, 150));\r\n\r\n/*------------------------------------*\\\r\n  SCROLL TO TOP / SCROLL UP\r\n\\*------------------------------------*/\r\nlet scrollUpObj = {\r\n    $scrollUpBtn: $('.js-scrollup-btn'),\r\n    scrollUp: function(e) {\r\n        e.preventDefault();\r\n        $('html, body').animate({\r\n            scrollTop: 0\r\n        }, 500);\r\n    },\r\n    init: function() {\r\n        this.$scrollUpBtn.on('click', this.scrollUp);\r\n    }\r\n}\r\n\r\n\r\n\r\n// ===============================\r\n// TOGGLE NAV\r\n// ===============================\r\nvar navToggleObj = {\r\n    $navToggle: $('.js-nav-toggle'),\r\n    $nav: $('.js-nav'),\r\n\r\n    toggleNav: function(e) {\r\n        let self = this;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.$nav.toggleClass('is-visible');\r\n        this.$navToggle.toggleClass('is-visible');\r\n\r\n        if (this.$nav.hasClass('is-visible')) {\r\n            $(window).on('click.nav', function() {\r\n                self.closeNav();\r\n            });\r\n            this.$nav.on('click.nav', function(event){\r\n                event.stopPropagation();\r\n            });\r\n        } else {\r\n            $(window).off('click.nav');\r\n            this.$nav.off('click.nav');\r\n        }\r\n    },\r\n\r\n    closeNav: function(e) {\r\n        this.$nav.removeClass('is-visible');\r\n        this.$navToggle.removeClass('is-visible');\r\n    },\r\n\r\n    init: function() {\r\n        this.$navToggle.on('click', this.toggleNav.bind(this));\r\n    }\r\n\r\n}\r\n\r\n// ===============================\r\n// Lazy Load Images\r\n// ===============================\r\nvar lazyLoadImg = {\r\n    $featuredItem: $('.js-featured-list-item'),\r\n    featuredItemOffsets: [],\r\n    scrolled: $(window).scrollTop(),\r\n    windowHeight: $(window).height(),\r\n\r\n    updateOffsets: function() {\r\n        \r\n        var featuredItemOffsets = this.featuredItemOffsets;\r\n        this.$featuredItem.each(function() {\r\n            featuredItemOffsets.push($(this).offset().top);\r\n        });\r\n    },\r\n\r\n    scrolling: function() {\r\n        this.scrolled = $(window).scrollTop();\r\n\r\n        for (var i = 0; i < this.featuredItemOffsets.length; i++) {\r\n\r\n            if ( (this.scrolled + this.windowHeight - 200) > this.featuredItemOffsets[i] ) {\r\n\r\n                this.$featuredItem.eq(i).find('.featured-list-item-img').css('background-image', 'url(\"' + this.$featuredItem.eq(i).attr('data-img') + '\")');\r\n                \r\n            }\r\n        }\r\n    },\r\n\r\n    init: function() {\r\n        this.updateOffsets();\r\n\r\n        $(window).on('scroll', this.scrolling.bind(this));\r\n    }\r\n}\r\n\r\n\r\n/*------------------------------------*\\\r\n  CONTACT MAP\r\n\\\r\n*------------------------------------*/\r\nlet contactMapObj = {\r\n    init() {\r\n        mapboxgl.accessToken = 'pk.eyJ1IjoibXJvd2wiLCJhIjoiQW5seEFHVSJ9.fC2U7HkEIM-7EPNDMIoRXA';\r\n        var map = new mapboxgl.Map({\r\n            container: 'contact-map',\r\n            style: 'mapbox://styles/mapbox/dark-v9',\r\n            center: [-118.2468, 34.0407],\r\n            zoom: 9\r\n        });\r\n\r\n        map.on('load', function() {\r\n            // var el = document.createElement('div');\r\n            // el.className = 'marker';\r\n            // el.style.backgroundImage = 'url(/assets/images/marker.png)';\r\n            // el.style.width = '64px';\r\n            // el.style.height = '64px';\r\n\r\n            // add marker to map\r\n            // new mapboxgl.Marker(el)\r\n            //     .setLngLat([-118.2468, 34.12])\r\n            //     .addTo(map);\r\n        });\r\n\r\n          \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/*------------------------------------*\\\r\n  CLICK NAV\r\n\\*------------------------------------*/\r\n$('.js-toggle').on('click', function(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    let self = $(this);\r\n\r\n    $(this).toggleClass('is-revealed');\r\n\r\n    if ($('.js-toggle-target').not(self.attr('data-target')).hasClass('is-revealed') ) {\r\n        $('.js-toggle-target').not(self.attr('data-target')).removeClass('is-revealed');\r\n    }\r\n\r\n    $(self.attr('data-target')).toggleClass('is-revealed');\r\n\r\n    $('body').on('click', function(e) {\r\n        if ( !$(e.target).closest('.js-toggle-target').length ) {\r\n            $(self.attr('data-target')).removeClass('is-revealed');\r\n        }\r\n    });\r\n})\r\n\r\n\r\n\r\n/*------------------------------------*\\\r\n  MASONRY\r\n\\*------------------------------------*/\r\nif (typeof imagesLoaded !== 'undefined') {\r\n    let $msnry = $('.msnry-grid').imagesLoaded(function() {\r\n        $msnry.css({opacity: 1});\r\n        $msnry.masonry({\r\n            itemSelector: '.msnry-grid__item',\r\n            // columnWidth: '.msnry-gris__sizer',\r\n            percentPosition: true,\r\n            // gutter: '.msnry-grid__gutter'\r\n        });\r\n    });\r\n\r\n}\r\n\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}